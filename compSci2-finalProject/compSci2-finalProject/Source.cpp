//main 

#include <iostream> 
#include <string> 
#include <fstream> 
#include "employee.h"
#include "EmployeeList.h"
#include <queue>

using namespace std;

void beginningRecords(EmployeeList& employeeDB);//adds 20 preset emps to db on startup

void menu(queue<int> &queue);//puts the user input operations in a queue
void operation(int, EmployeeList& employeeDatabase);//takes the operation in the front of the queue and completes it


int main() {

	cout << "This program acts as an employee database. Each employee has a last name, first name, socail security number," << endl
		<< "salary, age, and employee ID number that is generated by this program. " << endl
		<< "When entering each employee's social, enter the information in 'XXX-XX-XXX' format including the '-' marks." << endl << endl << endl;
	system("PAUSE");

	queue<int> operationsQueue;

	EmployeeList employeeDatabase;
	employeeDatabase.deleteExistingFile();
	beginningRecords(employeeDatabase);//adds in beginning records and displays the db by index of id
	menu(operationsQueue);//taking in queue of what user wants to do


	while (operationsQueue.empty() == false) {
		operation(operationsQueue.front(), employeeDatabase); //pass queue.front into a function that determines what operation to do 
		operationsQueue.pop();//after operation is done it removes it from queue 
		system("PAUSE");
	}

	employeeDatabase.~EmployeeList();
	operationsQueue.~queue();

	return 0;

}


void beginningRecords(EmployeeList & employeeDB) {
	employeeDB.addRecord("Justin", "Snyder", "111-00-1111", 19, 25000.00);//1
	employeeDB.addRecord("Lamar", "Jackson", "282-88-7211", 22, 236793.00);//2
	employeeDB.addRecord("Holden", "Butts", "666-96-5111", 21, 50000.00);//3
	employeeDB.addRecord("Eric", "Cassaday", "112-81-5151", 20, 22870.00);//4
	employeeDB.addRecord("Micheal", "Scott", "662-33-5111", 45, 72804.00);//5
	employeeDB.addRecord("Homer", "Simpson", "152-70-7781", 32, 25000.00);//6
	employeeDB.addRecord("Agent", "Carter", "172-06-5981", 34, 42527.00);//7
	employeeDB.addRecord("Kev", "Smith", "112-00-5149", 42, 42.00);//8
	employeeDB.addRecord("Tony", "Stark", "182-10-2211", 38, 92235.00);//9
	employeeDB.addRecord("Peter", "Parker", "816-00-9131", 22, 68636.00);//10
	employeeDB.addRecord("Daisy", "Ridley", "212-60-5191", 39, 51876.00);//11
	employeeDB.addRecord("Ben", "Dover", "112-05-5111", 35, 29600.00);//12
	employeeDB.addRecord("Clark", "Swatling", "115-30-9631", 63, 22866.00);//13
	employeeDB.addRecord("Kate", "Upton", "422-12-4665", 29, 63896.00);//14
	employeeDB.addRecord("Patrick", "Star", "943-30-5591", 43, 96277.00);//15
	employeeDB.addRecord("Leslie", "Knope", "853-22-5301", 41, 79115.00);//16
	employeeDB.addRecord("George", "Lopez", "112-98-8121", 52, 72804.00);//17
	employeeDB.addRecord("Arizona", "Zervas", "702-68-5861", 23, 758749.00);//18
	employeeDB.addRecord("Sandy", "Cheeks", "957-83-9535", 22, 29345.00);//19
	employeeDB.addRecord("Timmy", "Turner", "159-17-4834", 29, 32629.00);//20

	system("PAUSE");
	employeeDB.display();
}

void menu(queue<int> &queue) {

	cout << "*********MENU**********" << endl
		<< "Enter functions you would like to add to the queue and when finished enter 999" << endl
		<< "1: Add a record" << endl
		<< "2: Delete a record" << endl
		<< "3: Index the records by a specified field" << endl
		<< "4: Display all records in database by last indexing" << endl
		<< "5: Search for a record" << endl
		<< "************************" << endl << endl;
	int operation;

	bool goodInput = false;
	while (goodInput == false) {
		try {
			cout << "Enter an operation or 999 to stop inputting operations: ";
			cin >> operation;
			if (operation < 1 || operation > 5 && operation != 999 || cin.fail()) {
				string badInput = "Bad input, you must enter a value between 1 and 5, or 999 to stop.";
				throw badInput;
			}
			else {
				goodInput = true;
			}
		}
		catch (string badInput) {
			cout << badInput << " Try again." << endl;
			cin.clear();
			cin.ignore();
		}
	}
	
	
	while (operation != 999) {
		queue.push(operation);

		goodInput = false;
		while (goodInput == false) {
			try {
				cout << "Enter another operation or 999 to stop inputting operations: ";
				cin >> operation;
				if (operation < 1 || operation > 5 && operation != 999 || cin.fail()) {
					string badInput = "Bad input, you must enter a value between 1 and 5, or 999 to stop.";
					throw badInput;
				}
				else {
					goodInput = true;
				}
			}
			catch (string badInput) {
				cout << badInput << " Try again." << endl;
				cin.clear();
				cin.ignore();
			}
		}
	}
}

void operation(int op, EmployeeList& employeeDatabase) {
	int fieldToIndex = 1;
	int fieldToSearch = 1;
	switch (op)
	{
	case 1:
		employeeDatabase.addRecord();
		break;
	case 2:
		employeeDatabase.deleteRecord();
		break;
	case 3:
		int acsOrDesc;

		cout << "Enter what type of field you would like to index the Database by " << endl
			<< "1: ID" << endl
			<< "2: Last Name" << endl
			<< "3: First Name" << endl
			<< "4: Social Security Number" << endl
			<< "5: Age" << endl
			<< "6: Salary" << endl << endl
			<< "Enter a field: ";
		cin >> fieldToIndex;
		cout << "Enter the order you would like " << endl
			<< "1: Acscending" << endl
			<< "2: Descending" << endl << endl
			<< "Enter an order: ";
		cin >> acsOrDesc;
		employeeDatabase.indexRecords(fieldToIndex, acsOrDesc);

		break;
	case 4:
		employeeDatabase.display();
		break;
	case 5:
		
		cout << "Enter what type of field you would like to search the Database by " << endl
			<< "1: ID" << endl
			<< "2: Last Name" << endl
			<< "3: First Name" << endl
			<< "4: Social Security Number" << endl
			<< "5: Age" << endl
			<< "6: Salary" << endl <<endl
			<<"Enter a field: ";

		cin >> fieldToSearch;

		if (employeeDatabase.searchByField(fieldToSearch, USER_SEARCH) == true) {
			employeeDatabase.displaySearch();
		}
		else {
			cout << "No employees in this database matched this search" << endl;
		}
		break;
	default:
		break;
	}
}






